<!--
    <summary>
    Represents the chat component of the application, allowing authorized users to exchange messages in real-time.
    </summary>
-->

@page "/chat"
@using Microsoft.AspNetCore.Connections
@using Microsoft.AspNetCore.SignalR.Client
@rendermode InteractiveServer
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavManager

<PageTitle>ChatWave - Chat</PageTitle>

<AuthorizeView>
    <Authorized>

<h1 class="text-center">ChatWave</h1>

<div class="row">
    <div class="col-md-4"></div>
    <div class="col-md-4">
        <hr />
        <div>
            <ul class="list-group">
                @foreach (var message in messages)
                {
                    <li class="mb-2">@message</li>
                }
            </ul>
            <div class="border-primary">
                <div class="hstack gap-2 mb-4">
                    <textarea class="form-control" @bind="message" />
                    <button class="btn btn-success" @onclick="Send">Send message</button>
                </div>
            </div>
        </div>
        <div>
            @if (!IsConnected)
            {
                <div class="alert alert-danger">Chat disconnected</div>
            }
            else
            {
                <div class="alert alert-success">Chat connected</div>
            }
        </div>
    </div>
    <div class="col-md-4"></div>
</div>

    </Authorized>
    <NotAuthorized>
        <div class="alert alert-danger">You are not authorized to access this page. <a href="Account/Login" class="alert-link">Log in</a> to continue.</div>
    </NotAuthorized>
</AuthorizeView>

@code {
    private HubConnection? hubConnection;
    private List<string> messages = new();
    private string? userName;
    private string? message;

    /// <summary>
    /// Initializes the hub connection and sets up the event handler for receiving messages.
    /// </summary>
    /// <returns>A task representing the asynchronous operation.</returns>
    protected async override Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            userName = user.Identity.Name;
        }

        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavManager.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string, DateTime>("ReceiveMessage", (userName, message, dateTime) =>
        {
            var concatMessage = $"{dateTime} {userName}: {message}";
            messages.Add(concatMessage);
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    /// <summary>
    /// Gets a value indicating whether the chat connection is currently connected.
    /// </summary>
    private bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    /// <summary>
    /// Sends a message through the hub connection.
    /// </summary>
    /// <returns>A task representing the asynchronous operation.</returns>
    private async Task Send()
    {
        if (!string.IsNullOrWhiteSpace(message))
        {
            await hubConnection!.SendAsync("SendMessage", userName, message);
            message = string.Empty; // Clear the message input field
        }
    }
}
